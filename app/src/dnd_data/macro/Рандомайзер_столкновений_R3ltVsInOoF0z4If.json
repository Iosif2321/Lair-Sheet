{
  "name": "Рандомайзер столкновений",
  "type": "script",
  "_id": "R3ltVsInOoF0z4If",
  "author": "0bjY3pUjtY7ZCzNw",
  "img": "icons/magic/death/skull-horned-goat-pentagram-red.webp",
  "scope": "global",
  "command": "/**\n * Использует таблицы монстров по КО из #Дополнительные таблицы, для случайных монстров по КО. Инструкция: Выбрать количество, выбрать КО, нажать Добавить монстров, нажать Зарандомить.\n * Author: Allecks https://boosty.to/allecks\n * ver 27.02.2025\n */\n\nconst MonsterRandomizer = (function () {\n    let labelValues = [];\n\n    const DIFFICULTY_COLORS = {\n        'КО 0': '220, 220, 220',\n        'КО 0.125': '192, 192, 192',\n        'КО 0.25': '169, 169, 169',\n        'КО 0.5': '128, 128, 128',\n        'КО 1': '119, 136, 153',\n        'КО 2': '102, 205, 170',\n        'КО 3': '0, 250, 154',\n        'КО 4': '144, 238, 144',\n        'КО 5': '173, 255, 47',\n        'КО 6': '127, 255, 0',\n        'КО 7': '50, 205, 50',\n        'КО 8': '46, 139, 87',\n        'КО 9': '34, 139, 34',\n        'КО 10': '0, 128, 0',\n        'КО 11': '154, 205, 50',\n        'КО 12': '189, 183, 107',\n        'КО 13': '240, 230, 140',\n        'КО 14': '238, 232, 170',\n        'КО 15': '255, 218, 185',\n        'КО 16': '255, 228, 181',\n        'КО 17': '255, 239, 213',\n        'КО 18': '250, 250, 210',\n        'КО 19': '255, 255, 0',\n        'КО 20': '255, 215, 0',\n        'КО 21': '255, 165, 0',\n        'КО 22': '255, 140, 0',\n        'КО 23': '255, 69, 0',\n        'КО 24': '255, 99, 71',\n        'КО 25': '186, 85, 211',\n        'КО 26': '147, 112, 219',\n        'КО 27': '138, 43, 226',\n        'КО 28': '148, 0, 211',\n        'КО 29': '153, 50, 204',\n        'КО 30': '139, 0, 139',\n    };\n\n    function getRandomInt(max) {\n        return Math.floor(Math.random() * max);\n    }\n\n    function printMessage(message) {\n        if (!game.user) {\n            console.error(\"Пользователь не найден.\");\n            return;\n        }\n        const chatData = {\n            user: game.user._id,\n            content: message,\n            blind: true,\n        };\n\n        ChatMessage.create(chatData, {});\n    }\n\n    async function getRandomMonster(rc) {\n        const compendium = game.packs.get(\"laaru-dnd5-hw.tables-extra\");\n        \n        if (!compendium) {\n            console.error(\"Компендий 'laaru-dnd5-hw.tables-extra' не найден.\");\n            return null;\n        }\n        \n        rc = rc.replace(\"КО \", \"\");\n\n        let tableIndex = compendium.index.find((element) => {\n            return element.name.includes(\"Класс Опасности\") && element.name.includes(rc);\n        });\n    \n        if (!tableIndex) {\n            console.error(`Таблица для класса опасности \"${rc}\" не найдена.`);\n            return null; // Возвращаем null, если таблица не найдена\n        }\n    \n        const table = await compendium.getDocument(tableIndex._id);\n        const result = await table.roll();\n        const compendiumMonster = game.packs.get(result.results[0].documentCollection);\n        const monster = await compendiumMonster.getDocument(result.results[0].documentId);\n        return monster;\n    }\n\n    function formatMonsterEntry(monster, cr, amount) {\n        if (!monster) return '';\n\n        const name = monster.name.includes(\"/\") ? monster.name.split(\"/\")[0] : monster.name;\n        const compendiumId = monster.pack || (monster.collection?.metadata?.id || '');\n        const img = monster.img || \"icons/svg/mystery-man.svg\";\n        const difficulty = `КО ${cr}`;\n\n        const backgroundColor = `rgba(${DIFFICULTY_COLORS[difficulty] || '255, 255, 255'}, 0.2)`;\n        const borderColor = `rgba(${DIFFICULTY_COLORS[difficulty] || '0, 0, 0'}, 1)`;\n\n        //нужна ссылка на монстра\n        const monsterLink = `@Compendium[${compendiumId}.${monster.id}]{${name}}`;\n\n        return `\n            <div class=\"encounter-monster-card\" style=\"background-color: ${backgroundColor}; border: 2px solid ${borderColor}; border-radius: 8px; padding: 10px; margin: 10px 0; display: flex; align-items: center; gap: 15px; box-shadow: 2px 2px 5px rgba(0,0,0,0.1);\">\n                <img src=\"${img}\" width=\"50\" height=\"50\" style=\"border: none; border-radius: 4px;\">\n                <div class=\"monster-info\">\n                    <h3>${name}</h3>\n                    <p><strong>КО:</strong> ${cr}</p>\n                    <p>${monsterLink}</p>\n                </div>\n            </div>\n        `;\n    }\n\n    async function getMonstersList(list) {\n        let messageContent = [\"<h1>Рандомайзер столкновений</h1>\"];\n\n        for (const data of list) {\n            const [len, rcPart] = data.split(\"@\");\n            const rc = rcPart.split(\"{\")[0].trim();\n            messageContent.push(`<h2>Класс Опасности: ${rc}</h2>`);\n            \n            for (let i = 0; i < parseInt(len); i++) {\n                const monster = await getRandomMonster(rc);\n                if (monster) {\n                    const cr = monster.system.details.cr;\n                    const formattedEntry = formatMonsterEntry(monster, cr, 1);\n                    messageContent.push(formattedEntry);\n                } else {\n                    messageContent.push(`<p>Монстр не найден для КО: ${rc}</p>`);\n                }\n            }\n        }\n\n        return messageContent.join('');\n    }\n\n    async function handleSubmit(html) {\n        const label2Values = html.find('#label2')[0].textContent;\n        let monstersList = [];\n\n        const crList = [];\n        crList.push(`КО 0`);\n        crList.push(`КО 1/8`);\n        crList.push(`КО 1/4`);\n        crList.push(`КО 1/2`);\n        for (let i = 1; i <= 30; i++) {\n            crList.push(`КО ${i}`);\n        }\n\n        if (label2Values === '') {\n            monstersList.push(`${getRandomInt(5)+1}@${crList[getRandomInt(crList.length)]}`);\n        } else if (label2Values.includes(' | ')) {\n            monstersList = label2Values.split(' | ');\n        } else {\n            monstersList.push(label2Values);\n        }\n\n        const message = await getMonstersList(monstersList);\n        printMessage(message);\n    }\n\n    function initDialog() {\n        const dialogContent = `\n            <form name=\"rndenc\">\n                <div>\n                    <div class=\"form-group\">\n                        <label for=\"countCr\">Количество монстров одного вида КО:</label>\n                        <input type=\"number\" id=\"countCr\" name=\"countCr\" value=\"1\" min=\"1\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"dropdown2\">Выбрать Класс Опасности:</label>\n                        <select id=\"dropdown2\">\n                            ${generateDropdownOptions()}\n                        </select>\n                    </div>\n                    <label id=\"label2\"></label>\n                    <button type=\"button\" onclick=\"MonsterRandomizer.addValue('dropdown2', 'label2')\">Добавить монстров</button>\n                    <button type=\"button\" onclick=\"MonsterRandomizer.clearLabel('label2')\">Удалить всех монстров</button>\n                </div>\n            </form>\n        `;\n\n        new Dialog({\n            title: \"Рандомайзер столкновений\",\n            content: dialogContent,\n            buttons: {\n                submit: {\n                    icon: '<i class=\"fas fa-dice\"></i>',\n                    label: \"Зарандомить\",\n                    callback: async (html) => {\n                        await handleSubmit(html);\n                    }\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: \"Отмена\"\n                }\n            },\n            default: \"submit\",\n            close: () => {}\n        }).render(true);\n    }\n\n    function generateDropdownOptions() {\n        let options = '';\n        options += `<option value=\"0\">КО 0</option>`;\n        options += `<option value=\"1/8\">КО ${\"1/8\"}</option>`;\n        options += `<option value=\"1/4\">КО ${\"1/4\"}</option>`;\n        options += `<option value=\"1/2\">КО ${\"1/2\"}</option>`;\n        for (let i = 1; i <= 30; i++) {\n            options += `<option value=\"${i}\">КО ${i}</option>`;\n        }\n        return options;\n    }\n\n    function addValue(dropdownId, labelId) {\n        const dropdown = document.getElementById(dropdownId);\n        const selectedValue = dropdown.options[dropdown.selectedIndex].text;\n        const countM = document.forms.rndenc.elements.countCr.value;\n\n        labelValues.push(`${countM}@${selectedValue}`);\n        document.getElementById(labelId).innerText = labelValues.join(' | ');\n    }\n\n    function clearLabel(labelId) {\n        labelValues = [];\n        document.getElementById(labelId).innerText = '';\n    }\n\n    return {\n        init: initDialog,\n        addValue: addValue,\n        clearLabel: clearLabel,\n    };\n})();\n\nwindow.MonsterRandomizer = MonsterRandomizer;\nMonsterRandomizer.init();",
  "folder": "vwcXHRDEDhe74QLA",
  "flags": {
    "condition-lab-triggler": {
      "macroTrigger": ""
    },
    "exportSource": {
      "world": "first-adventure",
      "system": "dnd5e",
      "coreVersion": "11.315",
      "systemVersion": "2.4.1"
    },
    "core": {}
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.1.1",
    "coreVersion": "12.331",
    "createdTime": 1708619076688,
    "modifiedTime": 1741348924865,
    "lastModifiedBy": "acfNOAcZsZNb9kQO",
    "compendiumSource": null,
    "duplicateSource": null
  },
  "sort": 103125,
  "ownership": {
    "default": 0,
    "0bjY3pUjtY7ZCzNw": 3
  },
  "_key": "!macros!R3ltVsInOoF0z4If"
}
