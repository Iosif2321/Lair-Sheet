{
  "name": "Настройка типа стен",
  "type": "script",
  "scope": "global",
  "author": "N5s4uI6OpcSYQoF8",
  "img": "icons/environment/settlement/fence-stone-brick.webp",
  "command": "/*\nМакрос позволяет быстро изменять тип стен. \nПросто выделите стену или стены и нажмите макрос. \nСпасибо за макрос Kikimor!\nДоработал Xeonis \n-------------------------------------------------------------------------------------\nЭти настройки можно менять меняя значение true или false \nСтандартные настройки*/\n  // оставляет окно макроса открытым по нажатии на кнопки\n  let closeOnSubmit = false\n  //Постоянно открытое меню кастомной стены\n    let customOpen = false\n/*\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\nРазработка макросов и модулей для Fvtt писать -- Xeonis\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\nДалее этого коментария идет функциональный код ничего не торгайте, ну или трогайте :)\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n*/\nlet doorSounds = {\n none : \"\"\n}\n\nfor (const key in CONFIG.Wall.doorSounds) {\n if (Object.hasOwnProperty.call(CONFIG.Wall.doorSounds, key)) {\n   if (key == \"key\") continue;\n   const element = CONFIG.Wall.doorSounds[key];\n   doorSounds[key] = game.i18n.localize(element.label)\n }\n}\n\n\n\nlet moveNames = getNames(\n CONST.WALL_MOVEMENT_TYPES,\"WALLS.SenseTypes\")\nlet doorNames = getNames(\n CONST.WALL_DOOR_STATES,\"WALLS.DoorStates\")\nlet senseNames = getNames(\n CONST.WALL_SENSE_TYPES,\"WALLS.SenseTypes\")\nlet wallDirectionsNames = getNames(\n CONST.WALL_DIRECTIONS,\"WALLS.Directions\")\nlet doorTypesNames = getNames(\n CONST.WALL_DOOR_TYPES,\"WALLS.DoorTypes\")\n \nlet thresholdSight = \"\"\nlet attenuation = false\nlet thresholdLight = \"\" \nlet thresholdSound = \"\"\n\nlet defaultThreshold = {\n \"threshold\": {\n   \"light\": null,\n   \"sight\": null,\n   \"attenuation\": false, \n   \"sound\": null\n }\n}\n\nlet buttonsList = [\n {\n   label: `Применить кастомные параметры`,\n   callback: (html) => doMain(html)\n },\n {\n   label: `Обычная стена`,\n   callback: (html) => doMain(html,[\"NORMAL\",\"NORMAL\",\"NONE\"])\n },\n {\n   label: `Ландшафтная стена`,\n   callback: (html) => doMain(html,[\"NORMAL\",\"LIMITED\",\"NONE\"])\n },\n {\n   label: `Невидимая стена`,\n   callback: (html) => doMain(html,[\"NORMAL\",\"NONE\",\"NONE\"])\n },\n {\n   label: `Окно`,\n   callback: (html) => doMain(html,[\"NORMAL\",\"NONE\",\"NONE\"])\n },\n {\n   label: `Окно V11`,\n   callback: (html) => doMain(html,[\"NORMAL\",\"PROXIMITY\",\"NONE\",{\n     \"light\": 2,\n     \"sight\": 2,\n     \"attenuation\": true, \n     \"sound\": null\n   }])\n },\n {\n   label: `Дверь`,\n   callback: (html) => doMain(html,[\"NORMAL\",\"NORMAL\",\"DOOR\"])\n },\n {\n   label: `Секретная дверь`,\n   callback: (html) => doMain(html,[\"NORMAL\",\"NORMAL\",\"SECRET\"])\n   \n },\n {\n   label: `Решётка`,\n   callback: (html) => doMain(html,[\"NONE\",\"NORMAL\",\"DOOR\"])\n },\n\n]\n\n/**для сборки списков выбора*/\nfunction listBuilder (label, list,id,advanced =\"\"){\n console.log(\"fg\");\n let htmlList = `<div class=\"form-group\">\n <label>${label}</label>\n   <div class=\"form-fields\">\n   <select id=\"${id}\" name=\"${id}\">`\n if (Array.isArray(list)) {\n   list.forEach(element => {\n     let selected = (element.active)? \"selected\" : \"\";\n     htmlList += `<option value=\"${element.selector}\"  ${selected}>${element.content}</option>\\n`\n   });\n }else{\n   for (const key in list) {\n     if (Object.hasOwnProperty.call(list, key)) {\n       const element = list[key];\n       let selected = (element?.active)? \"selected\" : \"\";\n       let content = (element?.content)? element.content: element;\n       htmlList += `<option value=\"${key}\"  ${selected}>${content}</option>\\n`\n     }\n   }\n }\n htmlList += `</select>\n ${advanced}\n </div>\n </div>`\n return htmlList\n}\n\nlet content = () => {\n return `<form>\n <div class=\"form-group\">\n     <label>Держать окно открытым</label>\n     <input type=\"checkbox\" name=\"checkState\" id=\"checkState\" ${(closeOnSubmit)? \"\": \"checked\" } />\n </div>\n <details id=\"customWall\"  ${(customOpen)? \"open\": \"\"}>\n   <summary>Ручная настройка стен</summary>\n   Изначальные значения макроса не соответствуют настроенным на выбранных стенах!\n   ${listBuilder(game.i18n.localize(\"WALLS.Movement\"),moveNames,\"movement\")}\n   ${listBuilder(game.i18n.localize(\"WALLS.Light\")   ,senseNames,\"lightspropr\",\n       `<input class=\"proximity\" type=\"number\" name=\"thresholdLight\" min=\"0\" value=\"${thresholdLight}\" step=\"any\"/>`)}\n   ${listBuilder(game.i18n.localize(\"WALLS.Sight\"),senseNames,\"sight\",\n       `<input class=\"proximity\" type=\"number\" name=\"thresholdSight\" min=\"0\" value=\"${thresholdSight}\" step=\"any\"/>`)}\n   ${listBuilder(game.i18n.localize(\"WALLS.Sound\"),senseNames,\"sound\",\n       `<input class=\"proximity\" type=\"number\" name=\"thresholdSound\" min=\"0\" value=\"${thresholdSound}\" step=\"any\"/>`)}\n   ${listBuilder(game.i18n.localize(\"WALLS.Direction\"),wallDirectionsNames,\"direction\")}\n   <div class=\"form-group\">\n   <label>${game.i18n.localize(\"WALLS.ThresholdAttenuation\")} <i class=\"tip fas fa-info-circle\" data-tooltip=\"WALLS.ThresholdAttenuationHint\"></i></label>\n     <input type=\"checkbox\" name=\"attenuation\" ${(!attenuation)? \"\": \"checked\"}/>\n   </div>\n   ${listBuilder(game.i18n.localize(\"WALLS.Door\"),doorTypesNames,\"door\")}\n   <fieldset class=\"door-options\">\n     <legend>${game.i18n.localize(\"WALLS.DoorOptions\")}</legend>\n   ${listBuilder(game.i18n.localize(\"WALLS.DoorState\"),doorNames,\"doorState\")}\n   ${listBuilder(game.i18n.localize(\"WALLS.DoorSoundLabel\"),doorSounds,\"doorSound\")}\n </details>\n \n <h5>Выберите тип стены, чтобы применить его ко всем выделенным фрагментам <h5/>\n</form>`\n}\n\nlet dialogEditor = new Dialog({\n\n title: `Установка типа стены`,\n content: content(),\n buttons:  {...buttonsList},\n default: \"close\",\n close: () => {}\n});\n\nfunction setWallProperties (move = \"NORMAL\",sense = \"NORMAL\",door = \"NONE\",threshold = defaultThreshold) {\n return {\n       \"move\": CONST.WALL_MOVEMENT_TYPES[move],\n       \"sense\": CONST.WALL_SENSE_TYPES[sense],\n       \"door\": CONST.WALL_DOOR_TYPES[door],\n       \"threshold\": threshold,\n       \"dir\": CONST.WALL_DIRECTIONS.BOTH\n   } \n}\n\nasync function wallUpdate(data) {\n try {\n   const updates = canvas.walls.controlled.map(wall => {\n     return {_id: wall.document.id, ...data};\n   });\n   await canvas.scene.updateEmbeddedDocuments(\"Wall\", updates);\n } catch (error) {\n   \n }\n}\n\n\n\nfunction doMain (html,activateProperties) {\n /**чтение формы */\n customOpenNew = html.find('[id=\"customWall\"]')[0].open || false;\n closeOnSubmit = !html.find('[id=\"checkState\"]')[0].checked || false;\n\n /**чтение выбранных параметров*/\n\n movement = html.find('[id=\"movement\"]')[0].value\n LightProp = html.find('[id=\"lightspropr\"]')[0].value\n thresholdLight = html.find('[name=\"thresholdLight\"]')[0].value || 0\n SightProp = html.find('[id=\"sight\"]')[0].value\n thresholdSight = html.find('[name=\"thresholdSight\"]')[0].value || 0\n SoundProp = html.find('[id=\"sound\"]')[0].value\n thresholdSound = html.find('[name=\"thresholdSound\"]')[0].value || 0\n direction = html.find('[id=\"direction\"]')[0].value || 0\n attenuation = html.find('[name=\"attenuation\"]')[0].checked || false\n door = html.find('[id=\"door\"]')[0].value\n doorState = html.find('[id=\"doorState\"]')[0].value\n doorSound = html.find('[id=\"doorSound\"]')[0].value\n\n \n \n if (activateProperties) {\n   wallUpdate(setWallProperties(...activateProperties))\n }else{\n   \n   let num = (threshold,type) => {\n     const thresholdTypes = [CONST.WALL_SENSE_TYPES.PROXIMITY, CONST.WALL_SENSE_TYPES.DISTANCE];\n     return (thresholdTypes.includes(type) && threshold > 0)? threshold: null\n   }\n   let data ={\n     \"move\": movement,\n     \"sense\": LightProp,\n     \"door\": door,\n     \"dir\":direction,\n     \"threshold\": {\n       \"light\": num(thresholdLight,LightProp),\n       \"sight\": num(thresholdSight,SightProp),\n       \"sound\": num(thresholdSound,SoundProp),\n       \"attenuation\": attenuation\n     },\n     \"ds\":(door == CONST.WALL_DOOR_TYPES.NONE)? CONST.WALL_DOOR_STATES.CLOSED : doorState,\n     \"doorSound\": (door != 0 && doorSound != \"none\")? doorSound : undefined  \n   }\n\n   wallUpdate()\n }\n if (!closeOnSubmit) {\n\n   dialogEditor.render(true)\n }\n}\n\nfunction getNames (prop, i18name) {\n return Object.keys(prop).reduce((obj, key) => {\n   let k = prop[key];\n   obj[k] = game.i18n.localize(`${i18name}.${key}`);\n   return obj;\n }, {})\n}\n\ndialogEditor.render(true);",
  "ownership": {
    "default": 0,
    "N5s4uI6OpcSYQoF8": 3
  },
  "flags": {
    "combat-utility-belt": {
      "macroTrigger": ""
    },
    "exportSource": {
      "world": "vbna",
      "system": "dnd5e",
      "coreVersion": "10.291",
      "systemVersion": "2.1.5"
    },
    "core": {
      "sourceId": "Macro.XmgY8vp82O1tvvNM"
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.2.1",
    "coreVersion": "12.331",
    "createdTime": 1683390400167,
    "modifiedTime": 1720184509279,
    "lastModifiedBy": "dbwrZ0xM01XJyNCe",
    "compendiumSource": "Macro.XmgY8vp82O1tvvNM",
    "duplicateSource": null
  },
  "folder": "vwyjREHxtAnaLnqX",
  "sort": 300000,
  "_id": "BdHLmCCo4fYCQU9M",
  "_key": "!macros!BdHLmCCo4fYCQU9M"
}
