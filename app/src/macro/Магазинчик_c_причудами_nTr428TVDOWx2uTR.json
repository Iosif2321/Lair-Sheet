{
  "name": "Магазинчик c причудами",
  "type": "script",
  "img": "icons/environment/settlement/wood-stall.webp",
  "command": "/*Генератор случайного лута/магазинчика по таблицам\nесли выбран актер будет добавлять предметы нароленные ему в инвентарь\nДоработал Xeonis \n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\nРазработка макросов и модулей для Fvtt писать -- Xeonis\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-----[Стандартные настройки]-----\n---[Само изменяемые настройки]---\n-----------------------------------------------------------------------------------*/\n//Эти настройки можно менять и ручками и они еще будут сохранятся!\n//ВАЖНО! все настройки должны быть написаны построчно!\n// для каждой настройки своя строка!\n//Постоянно открытый список таблиц\nlet customOpen = false;\n//стандартная кость бросков\n//поддерживаются формулы бросков fvtt\nlet dafaultDice = \"1d10 + 1 * (5 + 1d3)\";\n//сумморовать или игнорировать по умолчанию\nlet defaultSumOrIgnore = false;\n//сохранять в токена по умолчанию (если он выбран)\nlet saveOnTockenAsDefault = false;\n//максимальная редкость по умолчанию\nlet typeItemAsDefault = 'artifact';\n//стоимость\nconst priceByType = {\n  'common': '(1d6) * 10',\n  'uncommon': '(1d6+1) * 100',\n  'rare': '2d10 * 1000',\n  'veryrare': '(1d4+1) * 10000',\n  'legenrady': '2d6 * 25000',\n  'artifact': '2d6 * 250000',\n};\n\n//в эти списки можно включать и выключать новые таблицы\n//после генерации макрос отпавляет в консоль оспользованные им таблицы\n//список стандартно используемых\nlet dafaultListTables = [\n];\n//список игнорируемых\nlet blockedListTables = [\n];\n//в каком компендиуме искать (можно переназначить под свой)\nconst tableCompendium = 'laaru-dnd5-hw.tables-extra';\n\n/*-----------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\nДалее этого коментария идет функциональный код ничего не торгайте, ну или трогайте :)\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------\n*/\n  let applyChanges = false\n\n  const textHeader = `<div class=\"table-draw\" data-table-id=\"LMrqEBBn3L1eegpc\">\n    <ol class=\"table-results\">`;\n  const textFooter = `</ol></div>`;\n\n\n  const itemTextHtml = async ({item, price ,count}) => {\n    let name = ''\n    if (item.text.includes(\"Безделушка:\")){\n      name = item.text.slice(11)\n    }else{\n      name = item.text.slice(0,25)\n    }\n    let answer = ''\n    if (item.img != null && item.documentId != null) {\n      answer = `<li class=\"table-result flexrow\" data-result-id=\"${item.documentId}\" \n        style=\"border-top: 1px solid var(--color-border-dark-tertiary); \n        border-bottom: 0; position: relative; \n        width: 100%; padding: 10px 0 0 10px; overflow: hidden\">\n        <img class=\"result-image\" src=\"${item.img}\">\n        <div class=\"result-text\" style=\"max-width: calc(100% - 44px)\">\n            <span>@UUID[Compendium.${item.documentCollection}.${item.documentId}]{${name}}</span>\n        </div>\n      </li>\n      <li style=\"padding: 0 0 4px 0;\">\n        <div class=\"flavor-text\" style=\"padding-left: 40px;\"> за <strong>${price} ЗМ${(count > 1)? \" x \"+ count+'шт.':''} </strong></div>\n      </li>`\n    }else if (item?.text) {\n      answer = `<li class=\"table-result flexrow\" data-result-id=\"${item._id}\" \n        style=\"border-top: 1px solid var(--color-border-dark-tertiary); \n        border-bottom: 0; position: relative; \n        width: 100%; padding: 10px 0 0 10px; overflow: hidden\">\n        <img class=\"result-image\" src=\"${item.img}\">\n        <div class=\"result-text\" style=\"max-width: calc(100% - 44px)\">\n          <span>${item.text}</span>\n        </div>\n      </li>`\n    }\n    return answer;\n  }\n\n  \n  \n  \n  let currentTables = new Collection()\n  const tablePacks = game.packs.get(tableCompendium);\n  if (!tablePacks.index.length) await tablePacks.getIndex();\n  \n  tablePacks.index.forEach(table => {\n      if (blockedListTables.findIndex(blocked => blocked._id == table._id) > 0) return;\n      let active = (dafaultListTables.findIndex(activ => activ._id == table._id) >= 0)? true: false;\n      currentTables.set([table._id],{\n              '_id':table._id,\n              \"name\":table.name,\n              \"img\":table.img,\n              active\n          })\n  })\n  \n  \n  \n  function buildRows(collecton) {\n      return collecton.map(table => {\n          let checked = (table.active)? \"checked\" : \"\";\n          return `\n              <tr id=\"id_${table._id}\">\n              <td style=\"background-image:url(${table.img});\n                  background-repeat:no-repeat;\n                  background-size:40px 40px;   \n                  width: 40px; height: 40px;\"\n              ></td>\n              <td>${table.name}</td>\n              <td><input type=\"text\" id=\"count_${table._id}\" value=\"0\" /></td>\n              <td style=\"text-align: center;\"><input type=\"checkbox\" \n                                                id=\"active_${table._id}\" \n                                                 ${checked}></td>\n              </tr>`\n      })    \n  }\n  \n  let header = `<tr>\n      <th style=\"length:15px\"></th>\n      <th style = \"text-align: center; width: 120px\">Таблица</th>\n      <th style = \" width: 50px \">Количество</th>\n      <th style = \" width: 15px\">Исп.</th>\n  </tr>`\n  function buildTable(header,rows = []) {\n      let mass = ''\n      rows.forEach(item => mass += item + \"\\n\")\n      return `<table>\n          ${header}\n          ${mass}\n          </table>\n      `\n  }\n  \n  \n  \nnew Dialog({\n    title: `Генератор торговца`,\n    content: `<form>\n    <details id=\"customWall\"  ${(customOpen)? \"open\": \"\"}>\n        <summary>Выбор Списка таблиц (<strong>нажмите здесь</strong>)</summary>\n        Значение количества для конкретной таблицы будет проссумировано с общим значением\n        <div style=\"height: 350px; overflow: auto;\">\n          ${buildTable(header,buildRows(currentTables))}\n        </div>\n        <div>\n          <h4>Настройки:</h4>\n          <div class=\"form-group\">\n              <label for=\"shop-gen-new\">Сохранить:</label>\n              <input type=\"checkbox\" id=\"shop-gen-new\">\n          </div>\n          <h5>Сброс или добавление игнорируемых только присохранении</h5>\n          <div class=\"form-group\">\n            <label for=\"shop-gen-remove\">Убрать выбранные таблицы(они больше не будут появлятся):</label>\n            <input type=\"checkbox\" id=\"shop-gen-remove\">\n            <label for=\"shop-gen-return\">Вернуть все убранные таблицы:</label>\n            <input  type=\"checkbox\" id=\"shop-gen-return\">\n          </div>       \n        </div>\n    </details>\n      <label for=\"count\">Количество предметов(число и формула броска):</label>\n      <input type=\"text\" id=\"shop-gen-count\" name=\"shop-gen-count\" value=\"${dafaultDice}\"/>   \n    </div>\n    <div class=\"form-group\">\n      <label>Максимальная редкость предмета:</label>\n      <select id=\"shop-gen-item-rarity\" name=\"shop-gen-item-rarity\">\n      <option value=\"common\"   ${(typeItemAsDefault == \"common\")? \"selected\": \"\"}>Обычный</option>\n      <option value=\"uncommon\" ${(typeItemAsDefault == \"uncommon\")? \"selected\": \"\"}>Необычный</option>\n      <option value=\"rare\"     ${(typeItemAsDefault == \"rare\")? \"selected\": \"\"}>Редкий</option>\n      <option value=\"veryrare\" ${(typeItemAsDefault == \"veryrare\")? \"selected\": \"\"} >Крайне редкий</option>\n      <option value=\"legenrady\"${(typeItemAsDefault == \"legenrady\")? \"selected\": \"\"}>Легендарный</option>\n      <option value=\"artifact\" ${(typeItemAsDefault == \"artifact\")? \"selected\": \"\"} >Артефакт</option>\n      </select>\n    </div>\n    <div class=\"form-group\">\n      <label for = \"shop-gen-whisper\">Шепот себе:</label>\n      <input type=\"checkbox\" id=\"shop-gen-whisper\" name=\"shop-gen-whisper\" checked >\n    </div>\n    <div class=\"form-group\">\n      <label for = \"shop-gen-store\">Сложите это все в рюкзак выбранного актера</label>\n      <input type=\"checkbox\" id=\"shop-gen-store\" ${(saveOnTockenAsDefault)? \"checked\": \"\"}>\n    </div>\n    <div class=\"form-group\">\n      <label for = \"shop-gen-same\">✅Суммировать/Игнорировать одинаковые</label>\n      <input type=\"checkbox\" id=\"shop-gen-same\" ${(defaultSumOrIgnore)? \"checked\": \"\"} >\n    </div>\n  </form>`,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Сгенерировать`,\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: `Отмена`\n        },\n    },\n    default: \"yes\",\n    close: async (html) => {\n      await domain (html)\n    }\n},\n{\n  height: \"450px\",\n  scale: true,\n  resizable:true,\n  \n}).render(true);\n\nasync function domain (html) {\n  let itemsRList = []\n\n  \n  let itemlist = []\n  if (applyChanges == false) return;\n  let activateList = []\n  currentTables.forEach(table => {\n    table.active = html.find(`[id=\"active_${table._id}\"]`)[0].checked || false\n\n    table.count = html.find(`[id=\"count_${table._id}\"]`)[0].value || \"0\"\n    if (table.active) activateList.push({_id:table._id, count: table.count})\n  })\n  console.groupCollapsed(\"Макрос бросков торговца\")\n    console.log(\"Только что бросались следующие таблицы:\");\n    console.info(activateList);\n    console.log(\"Для вставки в настройки использайте эту строку:\");\n    let savelist = JSON.stringify(activateList).split('},{').join('},\\n{')\n    console.info(JSON.stringify(activateList).split('},{').join('},\\n{'));\n  console.groupEnd()\n  \n  if (!activateList.length > 0) return;\n\n  const count = html.find('[name=\"shop-gen-count\"]')[0].value || '1';\n  const type = html.find('[name=\"shop-gen-item-rarity\"]')[0].value || \"common\";\n  const whisper = html.find('[name=\"shop-gen-whisper\"]')[0].checked || true;\n  const storeCreated = html.find('[id=\"shop-gen-store\"]')[0].checked || false;\n  const countSame = html.find('[id=\"shop-gen-same\"]')[0].checked || false;\n\n\n\n  const createMacro = html.find('[id=\"shop-gen-new\"]')[0].checked || false;\n  const restoreTable = html.find('[id=\"shop-gen-return\"]')[0].checked || false;\n  const addTableToIgnore = html.find('[id=\"shop-gen-remove\"]')[0].checked || false;\n  if (createMacro) {\n    let deactivateList = blockedListTables;\n    if (restoreTable) {\n      deactivateList = [];\n    }else if (addTableToIgnore) {\n      deactivateList = deactivateList.concat(...activateList)\n      savelist = \"[]\"\n    }\n    console.log(deactivateList);\n    saveSettings({ activateList:JSON.parse(savelist),count,type,storeCreated,countSame, deactivateList})\n    if (restoreTable || addTableToIgnore) return;\n  }\n\n\n  countItems = new Roll(\"\"+count.toString());\n  await countItems.evaluate();\n  countItems = countItems.total\n  for (let count = 0; count < countItems; count++) {\n    if (countItems <= 0) break;\n    let itemsOnThisRoll = new Roll(`1d${countItems}`);\n    await itemsOnThisRoll.evaluate();\n    await roll(itemsOnThisRoll.total)\n    countItems -= itemsOnThisRoll.total\n  }\n\n\n\n\n  async function roll (onThisIteration) {\n    let currentTable = new Roll(`1d${activateList.length}`);\n    await currentTable.evaluate();\n    let table = activateList[currentTable.total-1]\n    let countLocal = new Roll(\"\"+table.count);\n    await countLocal.evaluate();\n    if (countLocal.total < 0) activateList[currentTable.total-1].count = 0\n    let realTable = await tablePacks.getDocument(table._id);\n    let draw = await realTable.drawMany(countLocal.total+onThisIteration, { displayChat: false });\n    activateList[currentTable.total-1].count -= countLocal.total\n    draw.results.forEach(item => {itemsRList.push({item:item,count:1})})\n  }\n  \n\n\n\n  if (countSame) {\n    let itemsRList2 = []\n    let tobe = []\n    itemsRList.forEach ((item,ind,arr) => {\n      if (!tobe.includes(item.documentId)) {\n        let same = arr.filter((same) => item.item.documentId == same.item.documentId)\n        item.count = same.length\n        itemsRList2.push(item)\n        tobe.push(item.item.documentId);\n      }\n    })\n  \n    itemsRList = itemsRList2\n    itemsRList2 = null\n    tobe = null\n  }else{\n    itemsRList.forEach ((item) => {\n        item.count = 1\n    })\n  }\n  \n  for (let i = 0; i < itemsRList.length; i++) {\n    const item = itemsRList[i];\n    let pack = game.packs.get(item.item.documentCollection);\n    let moreInfoAboutItem = await pack?.getDocument(item.item?.documentId)\n    \n    let itemRarity = moreInfoAboutItem?.system?.rarity || \"uncommon\"\n    let price = 0\n    if(moreInfoAboutItem?.system?.price?.value > 0) {\n      price = moreInfoAboutItem?.system?.price?.value\n    }else{\n      price = new Roll(\"\"+priceByType[itemRarity]);\n      await price.evaluate();\n      price = price.total\n      if(moreInfoAboutItem?.system?.price?.value == 0){\n        item.price = price\n      }\n    }\n    \n    \n    let itemRarityLevel = Object.keys(priceByType).findIndex(i => i == itemRarity)\n    let maxRarityLevel = Object.keys(priceByType).findIndex(i => i == type)\n    if (itemRarityLevel > maxRarityLevel) continue;\n    itemsRList[i].moreInfoAboutItem = moreInfoAboutItem\n    itemlist.push(await itemTextHtml({\n      item:item.item,\n      count:item.count,\n      price\n    }))\n  }\n  if (storeCreated) {\n    additems(itemsRList)\n  }\n  let chatData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: textHeader + itemlist.join('') + textFooter,\n  };\n  if (whisper) {\n      chatData.whisper = ChatMessage.getWhisperRecipients(\"GM\");\n  }\n\n\n    ChatMessage.create(chatData, {});\n   \n}\n  \nlet additems = (items) => {\n  let actor = canvas.tokens.controlled[0].actor\n  items.forEach(item => {\n    if (item.moreInfoAboutItem) {\n      item.moreInfoAboutItem.system.price.value = item.price\n      actor.createEmbeddedDocuments(\"Item\", [item.moreInfoAboutItem]);\n    }\n  })\n}\n\n\nlet saveSettings = (inputParams) => {\n  let command = this.command\n  const parameters = [\n    {\n      inside:\"activateList\",\n      outside:\"dafaultListTables\",\n      typeOf: Array\n    },\n    {\n      inside:\"deactivateList\",\n      outside:\"blockedListTables\",\n      typeOf: Array\n    },\n    {\n      inside:\"count\",\n      outside:\"dafaultDice\",\n      typeOf: String\n    },\n    {\n      inside:\"type\",\n      outside:\"typeItemAsDefault\",\n      typeOf: String\n    },\n    {\n      inside:\"storeCreated\",\n      outside:\"saveOnTockenAsDefault\",\n      typeOf: Boolean\n    },\n    {\n      inside:\"countSame\",\n      outside:\"defaultSumOrIgnore\",\n      typeOf: Boolean\n    },\n  ]\n  parameters.forEach (parameter =>{\n    let beginChar = command.indexOf(parameter.outside)\n    if (beginChar != -1) {\n      let beginProperty = command.indexOf(\"=\",beginChar)+1\n      let endProperty = 0\n      if (parameter.typeOf == Array) {\n        let endPropertySep = \"]\"\n        endProperty = command.indexOf(endPropertySep,beginProperty)+2\n      }else{\n        let endPropertySep = \"\\n\"\n        endProperty = command.indexOf(endPropertySep,beginProperty)\n      }\n      let value = JSON.stringify(inputParams[parameter.inside]).split('},{').join('},\\n{')\n      command = command.slice(0, beginProperty+1) + value + command.slice(endProperty-1)\n    }\n    confset(command)\n    \n    \n    \n  })\n  return command\n}\n\nlet confset = (set) => {\n  this.command = set\n}\n\n//-----------------------------------------------------------------------------------",
  "author": "N5s4uI6OpcSYQoF8",
  "scope": "global",
  "ownership": {
    "default": 0,
    "N5s4uI6OpcSYQoF8": 3
  },
  "flags": {
    "exportSource": {
      "world": "test_main",
      "system": "dnd5e",
      "coreVersion": "11.311",
      "systemVersion": "2.3.1"
    },
    "core": {
      "sourceId": "Macro.wNKbIMrgBFJbs9dU"
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.0.3",
    "coreVersion": "12.331",
    "createdTime": 1696931537137,
    "modifiedTime": 1709198298316,
    "lastModifiedBy": "0bjY3pUjtY7ZCzNw",
    "compendiumSource": "Macro.wNKbIMrgBFJbs9dU",
    "duplicateSource": null
  },
  "folder": "vwcXHRDEDhe74QLA",
  "sort": 100000,
  "_id": "nTr428TVDOWx2uTR",
  "_key": "!macros!nTr428TVDOWx2uTR"
}
