{
  "name": "Калькулятор столкновений",
  "type": "script",
  "scope": "global",
  "author": "N5s4uI6OpcSYQoF8",
  "img": "icons/magic/death/skull-trio-badge-purple.webp",
  "command": "/**\n * Использует таблицы монстров по КО из #Дополнительные таблицы, для случайных монстров по КО. Инструкция: Выбрать рамкой токены персонажей, нажать на макрос. Макрос просчитает уровни персонажей, и выдаст в чате разные варианты сложностей столкновений.\n * Author: Allecks https://boosty.to/allecks\n * ver 23.02.2025\n */\n\n// Константы и конфигурация\nconst PARTY_SIZE = {\n    SMALL: { max: 2, multiplier: 0, description: \"Маленький отряд. Битвы усложняются.\" },\n    MEDIUM: { min: 3, max: 5, multiplier: 1, description: \"Стандартный отряд. Нет факторов отряда.\" },\n    LARGE: { min: 6, multiplier: 2, description: \"Большой отряд. Битвы упрощаются.\" }\n};\n\nconst DIFFICULTY_COLORS = {\n    'Легко': 'green',\n    'Средне': 'orange',\n    'Сложно': 'red',\n    'Смертельно': 'purple'\n};\n\nconst MONSTER_AMOUNT_FACTORS = [0.5, 1, 1.5, 2, 2.5, 3, 4, 5];\n\n// Таблица опыта по уровням\nconst EXPERIENCE_THRESHOLDS = {\n    1: [25, 50, 75, 100],\n    2: [50, 100, 150, 200],\n    3: [75, 150, 225, 400],\n    4: [125, 250, 375, 500],\n    5: [250, 500, 750, 1100],\n    6: [300, 600, 900, 1400],\n    7: [350, 750, 1100, 1700],\n    8: [450, 900, 1400, 2100],\n    9: [550, 1100, 1600, 2400],\n    10: [600, 1200, 1900, 2800],\n    11: [800, 1600, 2400, 3600],\n    12: [1000, 2000, 3000, 4500],\n    13: [1100, 2200, 3400, 5100],\n    14: [1250, 2500, 3800, 5700],\n    15: [1400, 2800, 4300, 6400],\n    16: [1600, 3200, 4800, 7200],\n    17: [2000, 3900, 5900, 8800],\n    18: [2100, 4200, 6300, 9500],\n    19: [2400, 4900, 7300, 10900],\n    20: [2800, 5700, 8500, 12700]\n};\n\n// Таблица КО монстров\nconst CHALLENGE_RATING_TABLE = {\n    10: 'ко 0',\n    25: 'ко 1/8',\n    50: 'ко 1/4',\n    100: 'ко 1/2',\n    200: 'ко 1',\n    450: 'ко 2',\n    700: 'ко 3',\n    1100: 'ко 4',\n    1800: 'ко 5',\n    2300: 'ко 6',\n    2900: 'ко 7',\n    3900: 'ко 8',\n    5000: 'ко 9',\n    5900: 'ко 10',\n    7200: 'ко 11',\n    8400: 'ко 12',\n    10000: 'ко 13',\n    11500: 'ко 14',\n    13000: 'ко 15',\n    15000: 'ко 16',\n    18000: 'ко 17',\n    20000: 'ко 18',\n    22000: 'ко 19',\n    25000: 'ко 20',\n    33000: 'ко 21',\n    41000: 'ко 22',\n    50000: 'ко 23',\n    62000: 'ко 24',\n    75000: 'ко 25',\n    90000: 'ко 26',\n    105000: 'ко 27',\n    120000: 'ко 28',\n    155000: 'ко 30'\n};\n\nclass EncounterCalculator {\n    constructor() {\n        this.tokens = canvas.tokens.controlled;\n        this.partySize = 0;\n        this.partySizeMultiplier = 1;\n        this.experienceSums = {\n            'Легко': 0,\n            'Средне': 0,\n            'Сложно': 0,\n            'Смертельно': 0\n        };\n    }\n\n    async initialize() {\n        if (this.tokens.length === 0) {\n            ui.notifications.error('Токены не выделены');\n            return false;\n        }\n        \n        await this.calculatePartySize();\n        return true;\n    }\n\n    async calculatePartySize() {\n        ui.notifications.info('Подсчет игроков');\n        \n        for (const token of this.tokens) {\n            this.partySize += await this.calculatePlayerLevel(token);\n        }\n\n        if (this.partySize <= PARTY_SIZE.SMALL.max) {\n            this.partySizeMultiplier = PARTY_SIZE.SMALL.multiplier;\n        } else if (this.partySize >= PARTY_SIZE.LARGE.min) {\n            this.partySizeMultiplier = PARTY_SIZE.LARGE.multiplier;\n        } else {\n            this.partySizeMultiplier = PARTY_SIZE.MEDIUM.multiplier;\n        }\n    }\n\n    async calculatePlayerLevel(token) {\n        const actor = token.actor;\n        const level = actor.system.details.level;\n        \n        if (actor.type === \"npc\" || !level) return 0;\n\n        const levelIndex = parseInt(level);\n        const expValues = EXPERIENCE_THRESHOLDS[levelIndex];\n        \n        this.experienceSums['Легко'] += expValues[0];\n        this.experienceSums['Средне'] += expValues[1];\n        this.experienceSums['Сложно'] += expValues[2];\n        this.experienceSums['Смертельно'] += expValues[3];\n        \n        return 1;\n    }\n\n    getPartySizeDescription() {\n        if (this.partySize <= PARTY_SIZE.SMALL.max) {\n            return PARTY_SIZE.SMALL.description;\n        } else if (this.partySize >= PARTY_SIZE.LARGE.min) {\n            return PARTY_SIZE.LARGE.description;\n        }\n        return PARTY_SIZE.MEDIUM.description;\n    }\n\n    async getRandomMonster(cr) {\n        //ui.notifications.info(`Поиск противника КО ${cr}`);\n        \n        const compendium = game.packs.get(\"laaru-dnd5-hw.tables-extra\");\n        const tableEntry = await this.findChallengeRatingTable(compendium, cr);\n        \n        if (!tableEntry) return null;\n\n        const table = await compendium.getDocument(tableEntry._id);\n        const result = await table.roll();\n        \n        const monsterCompendium = game.packs.get(result.results[0].documentCollection);\n        const monster = await monsterCompendium.getDocument(result.results[0].documentId);\n        \n        return monster;\n    }\n\n    async findChallengeRatingTable(compendium, cr) {\n        return compendium.index.find((element) => {\n            if (cr.includes('/')) {\n                return element.name.includes(\"Класс Опасности\") && element.name.includes(cr);\n            } \n            return element.name.includes(\"Класс Опасности\") && element.name.includes(cr) && !element.name.includes('/');\n        });\n    }\n\n    calculateMonsterCount(amount) {\n        if (amount === 1) return 1;\n        if (amount === 2) return 2;\n        if (amount > 2 && amount < 7) return 3;\n        if (amount > 6 && amount < 11) return 4;\n        if (amount > 10 && amount < 15) return 5;\n        return 6;\n    }\n\n    async calculateEncounters(exp, difficulty) {\n        const encounters = [];\n        const adjustedExp = Math.ceil(exp / MONSTER_AMOUNT_FACTORS[this.partySizeMultiplier]);\n\n        for (const [expThreshold, cr] of Object.entries(CHALLENGE_RATING_TABLE)) {\n            const amount = Math.floor(adjustedExp / parseInt(expThreshold));\n            if (amount > 0 && amount < 20) {\n                const monsterCount = this.calculateMonsterCount(amount);\n                const monster = await this.getRandomMonster(cr.split(' ')[1]);\n                if (monster) {\n                    encounters.push({\n                        monster: monster,\n                        cr: cr,\n                        amount: monsterCount,\n                        difficulty: difficulty\n                    });\n                }\n            }\n        }\n\n        return encounters;\n    }\n    \n    async formatDifficultySection(difficulty, encounters) {\n    const monsterEntries = encounters.map(e => \n        this.formatMonsterEntry(e.monster, e.cr, e.amount, difficulty)\n    ).filter(entry => entry !== '');\n\n    if (monsterEntries.length === 0) return '';\n\n    return `\n        <div style=\"margin: 10px 0;\">\n            <h2 style='color: ${DIFFICULTY_COLORS[difficulty]}'>Опасность: ${difficulty}</h2>\n            <div class=\"encounter-monsters\">\n                ${monsterEntries.join('')}\n            </div>\n        </div>\n    `;\n    }\n\n    formatMonsterEntry(monster, cr, amount, difficulty) {\n        if (!monster) return '';\n        \n        const name = monster.name.includes(\"/\") ? monster.name.split(\"/\")[0] : monster.name;\n        const compendiumId = monster.pack || monster.collection?.metadata?.id;\n        const img = monster.img || \"icons/svg/mystery-man.svg\";\n    \n        return `\n            <div class=\"encounter-monster\" style=\"border: 0.2rem solid ${DIFFICULTY_COLORS[difficulty]}; background-color: rgba(0, 0, 0, 0.2); border-radius: 8px; padding: 10px; margin: 5px 0; display: flex; align-items: center; gap: 10px;\">\n                <img src=\"${img}\" width=\"40\" height=\"40\" style=\"border: none;\">\n                <div class=\"monster-info\">\n                    <b>КО: ${cr}</b><br>\n                    @Compendium[${compendiumId}.${monster.id}]{${name}}<br>\n                    <span style=\"margin-left: 10px;\">кол-во: ${amount}</span>\n                </div>\n            </div>\n        `;\n    } \n\n    async generateChatMessage() {\n        const message = [\n            \"<h1>Калькулятор столкновений</h1>\",\n            `<h2 style='color: blue'>${this.getPartySizeDescription()}</h2>`,\n            `<p style='color: blue'>(${this.partySize} членов отряда)</p>`\n        ];\n\n        for (const [difficulty, exp] of Object.entries(this.experienceSums)) {\n            const encounters = await this.calculateEncounters(exp, difficulty);\n            if (encounters.length > 0) {\n                const section = await this.formatDifficultySection(difficulty, encounters);\n                if (section) message.push(section);\n            }\n        }\n\n        return message.join('');\n    }\n}\n\n// Использование\nasync function main() {\n    const calculator = new EncounterCalculator();\n    if (await calculator.initialize()) {\n        const message = await calculator.generateChatMessage();\n        ChatMessage.create({\n            user: game.user._id,\n            content: message,\n            blind: true\n        });\n    }\n}\n\nmain();",
  "folder": "vwcXHRDEDhe74QLA",
  "flags": {
    "condition-lab-triggler": {
      "macroTrigger": ""
    },
    "exportSource": {
      "world": "first-adventure",
      "system": "dnd5e",
      "coreVersion": "11.315",
      "systemVersion": "2.4.1"
    }
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "3.2.1",
    "coreVersion": "12.331",
    "createdTime": 1708619076688,
    "modifiedTime": 1741348860155,
    "lastModifiedBy": "acfNOAcZsZNb9kQO",
    "compendiumSource": null,
    "duplicateSource": null
  },
  "_id": "NmZ0BtkEFN77AZws",
  "sort": 101563,
  "ownership": {
    "default": 0,
    "N5s4uI6OpcSYQoF8": 3
  },
  "_key": "!macros!NmZ0BtkEFN77AZws"
}
